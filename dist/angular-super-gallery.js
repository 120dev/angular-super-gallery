var ASG;
(function (ASG) {
    var GalleryViewController = (function () {
        function GalleryViewController(fullscreen, timeout, galleryId) {
            this.fullscreen = fullscreen;
            this.timeout = timeout;
            this.galleryId = galleryId;
            this.help = false;
            this.gui = true;
            this.functionsVisible = false;
            this.transition = 'rotateLR';
            this.transitions = [
                'no',
                'fadeInOut',
                'zoomInOut',
                'rotateLR',
                'rotateTB',
                'rotateZY',
                'slideLR',
                'slideTB',
                'flipX',
                'flipY'
            ];
            if (this.id == undefined) {
                this.id = 'id' + this.galleryId.getNext();
            }
            this.init();
        }
        GalleryViewController.prototype.init = function () {
            var _this = this;
            if (this.visible == undefined) {
                this.visible = false;
            }
            if (this.files == undefined) {
                this.files = [];
            }
            this.timeout(function () {
                var element = '.gallery-view.' + _this.id + ' li.dropdown-submenu';
                angular.element(element).off().on('click', function (event) {
                    event.stopPropagation();
                    if (angular.element(this).hasClass('open')) {
                        angular.element(this).removeClass('open');
                    }
                    else {
                        angular.element(element).removeClass('open');
                        angular.element(this).addClass('open');
                    }
                });
                _this.setFocus();
            }, 100);
        };
        Object.defineProperty(GalleryViewController.prototype, "visible", {
            get: function () {
                return this._visible;
            },
            set: function (value) {
                this._visible = value;
                if (this._visible) {
                    this.init();
                    angular.element('body').addClass('yhidden');
                }
                else {
                    angular.element('body').removeClass('yhidden');
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GalleryViewController.prototype, "isSingle", {
            get: function () {
                return this.files.length > 1 ? false : true;
            },
            enumerable: true,
            configurable: true
        });
        GalleryViewController.prototype.setFocus = function () {
            angular.element('.gallery-view.' + this.id + ' .keyInput').trigger('focus').focus();
        };
        GalleryViewController.prototype.setTransition = function (transition) {
            this.transition = transition;
            this.setFocus();
        };
        GalleryViewController.prototype.functionsHide = function () {
            this.functionsVisible = false;
        };
        GalleryViewController.prototype.functionsShow = function () {
            this.functionsVisible = true;
        };
        GalleryViewController.prototype.downloadLink = function () {
            if (this.selected != undefined) {
                return this.baseUrl + this.files[this.selected].name;
            }
        };
        Object.defineProperty(GalleryViewController.prototype, "file", {
            get: function () {
                return this.files[this.selected];
            },
            enumerable: true,
            configurable: true
        });
        GalleryViewController.prototype.toBackward = function () {
            this.direction = 'backward';
            this.selected = this.selected == 0 ? this.files.length - 1 : this.selected - 1;
        };
        GalleryViewController.prototype.toForward = function () {
            this.direction = 'forward';
            this.selected = this.selected == this.files.length - 1 ? 0 : this.selected + 1;
        };
        GalleryViewController.prototype.toFirst = function () {
            this.direction = 'backward';
            this.selected = 0;
        };
        GalleryViewController.prototype.toLast = function () {
            this.direction = 'forward';
            this.selected = this.files.length - 1;
        };
        GalleryViewController.prototype.exit = function () {
            this.visible = false;
        };
        GalleryViewController.prototype.keyUp = function (e) {
            if (e.keyCode == 27) {
                this.exit();
            }
            if (e.keyCode == 32) {
                this.toForward();
            }
            if (e.keyCode == 37) {
                this.toBackward();
            }
            if (e.keyCode == 39) {
                this.toForward();
            }
            if (e.keyCode == 38 || e.keyCode == 36) {
                this.toFirst();
            }
            if (e.keyCode == 40 || e.keyCode == 35) {
                this.toLast();
            }
            if (e.keyCode == 70 || e.keyCode == 13) {
                this.toggleFullScreen();
            }
            if (e.keyCode == 71) {
                this.toggleGUI();
            }
            if (e.keyCode == 72) {
                this.toggleHelp();
            }
            if (e.keyCode == 84) {
                this.nextTransition();
            }
        };
        GalleryViewController.prototype.nextTransition = function () {
            var idx = this.transitions.indexOf(this.transition) + 1;
            var next = idx >= this.transitions.length ? 0 : idx;
            this.transition = this.transitions[next];
        };
        GalleryViewController.prototype.toggleFullScreen = function () {
            if (this.fullscreen.isEnabled()) {
                this.fullscreen.cancel();
            }
            else {
                this.fullscreen.all();
            }
            this.setFocus();
        };
        GalleryViewController.prototype.toggleHelp = function () {
            this.help = !this.help;
            this.setFocus();
        };
        GalleryViewController.prototype.toggleGUI = function () {
            this.gui = !this.gui;
        };
        return GalleryViewController;
    }());
    ASG.GalleryViewController = GalleryViewController;
    var GalleryIdService = (function () {
        function GalleryIdService() {
            this.id = 1;
        }
        GalleryIdService.prototype.getNext = function () {
            return this.id++;
        };
        return GalleryIdService;
    }());
    ASG.GalleryIdService = GalleryIdService;
    var app = angular.module('angularSuperGallery', ['ngAnimate']);
    app.service('galleryId', GalleryIdService);
    app.component("galleryView", {
        controller: ["Fullscreen", "$timeout", "galleryId", ASG.GalleryViewController],
        templateUrl: 'views/angular-super-gallery.html',
        bindings: {
            visible: '=',
            selected: '<',
            title: '@',
            badge: '@',
            files: '=',
            baseUrl: '@'
        }
    });
    app.provider('angularSuperGalleryOptions', function () {
        var defaults = {};
        return {
            setOpts: function (options) {
                angular.extend(defaults, options);
            },
            $get: function () {
                return defaults;
            }
        };
    });
    app.directive('imageOnload', function () {
        return {
            restrict: 'A',
            link: function (scope, element, attrs) {
                element.bind('load', function () {
                    scope.$apply(attrs.imageOnload);
                });
            }
        };
    });
    app.filter('bytes', function () {
        return function (bytes, precision) {
            if (isNaN(parseFloat(bytes)) || !isFinite(bytes))
                return '';
            if (bytes === 0)
                return '0';
            if (typeof precision === 'undefined')
                precision = 1;
            var units = ['bytes', 'kB', 'MB', 'GB', 'TB', 'PB'], number = Math.floor(Math.log(bytes) / Math.log(1024));
            return (bytes / Math.pow(1024, Math.floor(number))).toFixed(precision) + ' ' + units[number];
        };
    });
})(ASG || (ASG = {}));

//# sourceMappingURL=data:application/json;charset=utf8;base64,
