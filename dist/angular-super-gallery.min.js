/**
 * angular-super-gallery - AngularJS Super Gallery
 * 
 * @version v1.4.3
 * @link http://schalk.hu/projects/angular-super-gallery/demo/
 * @license MIT
 */
!function(n){function e(r){if(t[r])return t[r].exports;var i=t[r]={i:r,l:!1,exports:{}};return n[r].call(i.exports,i,i.exports,e),i.l=!0,i.exports}var t={};e.m=n,e.c=t,e.d=function(n,t,r){e.o(n,t)||Object.defineProperty(n,t,{enumerable:!0,get:r})},e.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},e.t=function(n,t){if(1&t&&(n=e(n)),8&t)return n;if(4&t&&"object"==typeof n&&n&&n.__esModule)return n;var r=Object.create(null);if(e.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:n}),2&t&&"string"!=typeof n)for(var i in n)e.d(r,i,function(e){return n[e]}.bind(null,i));return r},e.n=function(n){var t=n&&n.__esModule?function(){return n.default}:function(){return n};return e.d(t,"a",t),t},e.o=function(n,e){return Object.prototype.hasOwnProperty.call(n,e)},e.p="",e(e.s="./src/asg.ts")}({"./src/asg-bytes.ts":function(module,exports,__webpack_require__){"use strict";eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nfunction asgBytesFilter() {\r\n    return function (bytes, precision) {\r\n        if (isNaN(parseFloat(bytes)) || !isFinite(bytes)) {\r\n            return '';\r\n        }\r\n        if (bytes === 0) {\r\n            return '0';\r\n        }\r\n        if (typeof precision === 'undefined') {\r\n            precision = 1;\r\n        }\r\n        var units = ['bytes', 'kB', 'MB', 'GB', 'TB', 'PB'], number = Math.floor(Math.log(bytes) / Math.log(1024));\r\n        return (bytes / Math.pow(1024, Math.floor(number))).toFixed(precision) + ' ' + units[number];\r\n    };\r\n}\r\nexports.asgBytesFilter = asgBytesFilter;\r\n\n\n//# sourceURL=webpack:///./src/asg-bytes.ts?")},"./src/asg-control.ts":function(module,exports,__webpack_require__){"use strict";eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar ControlController = /** @class */ (function () {\r\n    function ControlController(service, $scope) {\r\n        this.service = service;\r\n        this.$scope = $scope;\r\n        this.type = 'control';\r\n        this.template = 'views/asg-control.html';\r\n    }\r\n    ControlController.prototype.$onInit = function () {\r\n        var _this = this;\r\n        // get service instance\r\n        this.asg = this.service.getInstance(this);\r\n        this.$scope.forward = function () {\r\n            _this.asg.toForward(true);\r\n        };\r\n        this.$scope.backward = function () {\r\n            _this.asg.toBackward(true);\r\n        };\r\n    };\r\n    Object.defineProperty(ControlController.prototype, \"config\", {\r\n        // get image config\r\n        get: function () {\r\n            return this.asg.options[this.type];\r\n        },\r\n        // set image config\r\n        set: function (value) {\r\n            this.asg.options[this.type] = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ControlController.prototype, \"selected\", {\r\n        // get selected image\r\n        get: function () {\r\n            if (!this.asg) {\r\n                return;\r\n            }\r\n            return this.asg.selected;\r\n        },\r\n        // set selected image\r\n        set: function (v) {\r\n            if (!this.asg) {\r\n                return;\r\n            }\r\n            this.asg.selected = v;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return ControlController;\r\n}());\r\nexports.ControlController = ControlController;\r\nexports.asgControlComponent = {\r\n    controller: ['asgService', '$scope', ControlController],\r\n    template: '<div class=\"asg-control {{ $ctrl.asg.classes }}\"><div ng-include=\"$ctrl.template\"></div></div>',\r\n    bindings: {\r\n        id: '@?',\r\n        selected: '=?',\r\n        template: '@?'\r\n    }\r\n};\r\n\n\n//# sourceURL=webpack:///./src/asg-control.ts?")},"./src/asg-image.ts":function(module,exports,__webpack_require__){"use strict";eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar angular_1 = __webpack_require__(/*! angular */ \"angular\");\r\nvar ImageController = /** @class */ (function () {\r\n    function ImageController(service, $rootScope, $element, $window, $scope) {\r\n        var _this = this;\r\n        this.service = service;\r\n        this.$rootScope = $rootScope;\r\n        this.$element = $element;\r\n        this.$window = $window;\r\n        this.$scope = $scope;\r\n        this.type = 'image';\r\n        angular_1.element($window).bind('resize', function (event) {\r\n            _this.onResize();\r\n        });\r\n    }\r\n    ImageController.prototype.onResize = function () {\r\n        if (this.config.heightAuto.onresize) {\r\n            this.setHeight(this.asg.file);\r\n        }\r\n    };\r\n    ImageController.prototype.$onInit = function () {\r\n        var _this = this;\r\n        // get service instance\r\n        this.asg = this.service.getInstance(this);\r\n        // set image component height\r\n        this.$rootScope.$on(this.asg.events.FIRST_IMAGE + this.id, function (event, data) {\r\n            if (!_this.config.height && _this.config.heightAuto.initial === true) {\r\n                _this.setHeight(data.img);\r\n            }\r\n            _this.asg.thumbnailsMove(200);\r\n        });\r\n        // scope apply when image loaded\r\n        this.$rootScope.$on(this.asg.events.LOAD_IMAGE + this.id, function (event, data) {\r\n            _this.$scope.$apply();\r\n        });\r\n    };\r\n    // set image component height\r\n    ImageController.prototype.setHeight = function (img) {\r\n        var width = this.$element.children('div')[0].clientWidth;\r\n        var ratio = img.width / img.height;\r\n        this.config.height = width / ratio;\r\n    };\r\n    Object.defineProperty(ImageController.prototype, \"height\", {\r\n        // height\r\n        get: function () {\r\n            return this.config.height;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ImageController.prototype, \"config\", {\r\n        // get image config\r\n        get: function () {\r\n            return this.asg.options[this.type];\r\n        },\r\n        // set image config\r\n        set: function (value) {\r\n            this.asg.options[this.type] = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    ImageController.prototype.toBackward = function (stop, $event) {\r\n        if ($event) {\r\n            $event.stopPropagation();\r\n        }\r\n        this.asg.toBackward(stop);\r\n    };\r\n    ImageController.prototype.toForward = function (stop, $event) {\r\n        if ($event) {\r\n            $event.stopPropagation();\r\n        }\r\n        this.asg.toForward(stop);\r\n    };\r\n    ImageController.prototype.hover = function (index, $event) {\r\n        if (this.config.arrows.preload === true) {\r\n            this.asg.hoverPreload(index);\r\n        }\r\n    };\r\n    Object.defineProperty(ImageController.prototype, \"selected\", {\r\n        // get selected image\r\n        get: function () {\r\n            if (!this.asg) {\r\n                return;\r\n            }\r\n            return this.asg.selected;\r\n        },\r\n        // set selected image\r\n        set: function (v) {\r\n            if (!this.asg) {\r\n                return;\r\n            }\r\n            this.asg.selected = v;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ImageController.prototype, \"modalAvailable\", {\r\n        // modal available\r\n        get: function () {\r\n            return this.asg.modalAvailable && this.config.click.modal;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    // open the modal\r\n    ImageController.prototype.modalOpen = function ($event) {\r\n        if ($event) {\r\n            $event.stopPropagation();\r\n        }\r\n        if (this.config.click.modal) {\r\n            this.asg.modalOpen(this.asg.selected);\r\n        }\r\n    };\r\n    return ImageController;\r\n}());\r\nexports.ImageController = ImageController;\r\nexports.asgImageComponent = {\r\n    controller: ['asgService', '$rootScope', '$element', '$window', '$scope', ImageController],\r\n    templateUrl: 'views/asg-image.html',\r\n    transclude: true,\r\n    bindings: {\r\n        id: '@?',\r\n        items: '=?',\r\n        options: '=?',\r\n        selected: '=?',\r\n        baseUrl: '@?'\r\n    }\r\n};\r\n\n\n//# sourceURL=webpack:///./src/asg-image.ts?")},"./src/asg-info.ts":function(module,exports,__webpack_require__){"use strict";eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar InfoController = /** @class */ (function () {\r\n    function InfoController(service, $scope) {\r\n        this.service = service;\r\n        this.$scope = $scope;\r\n        this.type = 'info';\r\n        this.template = 'views/asg-info.html';\r\n    }\r\n    InfoController.prototype.$onInit = function () {\r\n        // get service instance\r\n        this.asg = this.service.getInstance(this);\r\n    };\r\n    Object.defineProperty(InfoController.prototype, \"file\", {\r\n        get: function () {\r\n            return this.asg.file;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return InfoController;\r\n}());\r\nexports.InfoController = InfoController;\r\nexports.asgInfoComponent = {\r\n    controller: ['asgService', '$scope', InfoController],\r\n    template: '<div class=\"asg-info {{ $ctrl.asg.classes }}\"><div ng-include=\"$ctrl.template\"></div></div>',\r\n    transclude: true,\r\n    bindings: {\r\n        id: '@?',\r\n        template: '@?'\r\n    }\r\n};\r\n\n\n//# sourceURL=webpack:///./src/asg-info.ts?")},"./src/asg-modal.ts":function(module,exports,__webpack_require__){"use strict";eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar ModalController = /** @class */ (function () {\r\n    function ModalController(service, $window, $rootScope, $scope) {\r\n        this.service = service;\r\n        this.$window = $window;\r\n        this.$rootScope = $rootScope;\r\n        this.$scope = $scope;\r\n        this.type = 'modal';\r\n        this.arrowsVisible = false;\r\n    }\r\n    ModalController.prototype.$onInit = function () {\r\n        var _this = this;\r\n        // get service instance\r\n        this.asg = this.service.getInstance(this);\r\n        this.asg.modalAvailable = true;\r\n        // scope apply when image loaded\r\n        this.$rootScope.$on(this.asg.events.LOAD_IMAGE + this.id, function (event, data) {\r\n            _this.$scope.$apply();\r\n        });\r\n    };\r\n    ModalController.prototype.getClass = function () {\r\n        if (!this.config) {\r\n            return;\r\n        }\r\n        var ngClass = [];\r\n        if (this.config.header.dynamic) {\r\n            ngClass.push('dynamic');\r\n        }\r\n        ngClass.push(this.asg.options.theme);\r\n        return ngClass.join(' ');\r\n    };\r\n    // get action from keycodes\r\n    ModalController.prototype.getActionByKeyCode = function (keyCode) {\r\n        var keys = Object.keys(this.config.keycodes);\r\n        var action;\r\n        for (var key in keys) {\r\n            var codes = this.config.keycodes[keys[key]];\r\n            if (!codes) {\r\n                continue;\r\n            }\r\n            var index = codes.indexOf(keyCode);\r\n            if (index > -1) {\r\n                action = keys[key];\r\n                break;\r\n            }\r\n        }\r\n        return action;\r\n    };\r\n    ModalController.prototype.close = function ($event) {\r\n        this.asg.modalClick($event);\r\n        this.asg.modalClose();\r\n        if (this.$window.screenfull) {\r\n            this.$window.screenfull.exit();\r\n        }\r\n    };\r\n    ModalController.prototype.imageClick = function ($event) {\r\n        this.asg.modalClick($event);\r\n        if (this.config.click.close) {\r\n            this.asg.modalClose();\r\n            if (this.$window.screenfull) {\r\n                this.$window.screenfull.exit();\r\n            }\r\n        }\r\n    };\r\n    ModalController.prototype.hover = function (index, $event) {\r\n        if (this.config.arrows.preload === true) {\r\n            this.asg.hoverPreload(index);\r\n        }\r\n    };\r\n    ModalController.prototype.setFocus = function ($event) {\r\n        this.asg.modalClick($event);\r\n    };\r\n    ModalController.prototype.autoPlayToggle = function ($event) {\r\n        this.asg.modalClick($event);\r\n        this.asg.autoPlayToggle();\r\n    };\r\n    ModalController.prototype.toFirst = function (stop, $event) {\r\n        this.asg.modalClick($event);\r\n        this.asg.toFirst();\r\n    };\r\n    ModalController.prototype.toBackward = function (stop, $event) {\r\n        this.asg.modalClick($event);\r\n        this.asg.toBackward(stop);\r\n    };\r\n    ModalController.prototype.toForward = function (stop, $event) {\r\n        this.asg.modalClick($event);\r\n        this.asg.toForward(stop);\r\n    };\r\n    ModalController.prototype.toLast = function (stop, $event) {\r\n        this.asg.modalClick($event);\r\n        this.asg.toLast(stop);\r\n    };\r\n    // do keyboard action\r\n    ModalController.prototype.keyUp = function (e) {\r\n        var action = this.getActionByKeyCode(e.keyCode);\r\n        switch (action) {\r\n            case 'exit':\r\n                this.close();\r\n                break;\r\n            case 'playpause':\r\n                this.asg.autoPlayToggle();\r\n                break;\r\n            case 'forward':\r\n                this.asg.toForward(true);\r\n                break;\r\n            case 'backward':\r\n                this.asg.toBackward(true);\r\n                break;\r\n            case 'first':\r\n                this.asg.toFirst(true);\r\n                break;\r\n            case 'last':\r\n                this.asg.toLast(true);\r\n                break;\r\n            case 'fullscreen':\r\n                this.toggleFullScreen();\r\n                break;\r\n            case 'menu':\r\n                this.toggleMenu();\r\n                break;\r\n            case 'caption':\r\n                this.toggleCaption();\r\n                break;\r\n            case 'help':\r\n                this.toggleHelp();\r\n                break;\r\n            case 'size':\r\n                this.toggleSize();\r\n                break;\r\n            case 'transition':\r\n                this.nextTransition();\r\n                break;\r\n            default:\r\n                this.asg.log('unknown keyboard action: ' + e.keyCode);\r\n                break;\r\n        }\r\n    };\r\n    // switch to next transition effect\r\n    ModalController.prototype.nextTransition = function ($event) {\r\n        this.asg.modalClick($event);\r\n        var idx = this.asg.transitions.indexOf(this.config.transition) + 1;\r\n        var next = idx >= this.asg.transitions.length ? 0 : idx;\r\n        this.config.transition = this.asg.transitions[next];\r\n    };\r\n    // toggle fullscreen\r\n    ModalController.prototype.toggleFullScreen = function ($event) {\r\n        this.asg.modalClick($event);\r\n        if (this.$window.screenfull) {\r\n            this.$window.screenfull.toggle();\r\n        }\r\n    };\r\n    // toggle thumbnails\r\n    ModalController.prototype.toggleThumbnails = function ($event) {\r\n        this.asg.modalClick($event);\r\n        this.config.thumbnail.dynamic = !this.config.thumbnail.dynamic;\r\n    };\r\n    // set transition effect\r\n    ModalController.prototype.setTransition = function (transition, $event) {\r\n        this.asg.modalClick($event);\r\n        this.config.transition = transition;\r\n    };\r\n    // set theme\r\n    ModalController.prototype.setTheme = function (theme, $event) {\r\n        this.asg.modalClick($event);\r\n        this.asg.options.theme = theme;\r\n    };\r\n    // toggle help\r\n    ModalController.prototype.toggleHelp = function ($event) {\r\n        this.asg.modalClick($event);\r\n        this.config.help = !this.config.help;\r\n    };\r\n    // toggle size\r\n    ModalController.prototype.toggleSize = function ($event) {\r\n        this.asg.modalClick($event);\r\n        var index = this.asg.sizes.indexOf(this.config.size);\r\n        index = (index + 1) >= this.asg.sizes.length ? 0 : ++index;\r\n        this.config.size = this.asg.sizes[index];\r\n        this.asg.log('toggle image size:', [this.config.size, index]);\r\n    };\r\n    // toggle menu\r\n    ModalController.prototype.toggleMenu = function ($event) {\r\n        this.asg.modalClick($event);\r\n        this.config.header.dynamic = !this.config.header.dynamic;\r\n    };\r\n    // toggle caption\r\n    ModalController.prototype.toggleCaption = function () {\r\n        this.config.caption.visible = !this.config.caption.visible;\r\n    };\r\n    Object.defineProperty(ModalController.prototype, \"marginTop\", {\r\n        // get margint top\r\n        get: function () {\r\n            return this.config.marginTop;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ModalController.prototype, \"marginBottom\", {\r\n        // get margin bottom\r\n        get: function () {\r\n            return this.config.marginBottom;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ModalController.prototype, \"visible\", {\r\n        // get modal visible\r\n        get: function () {\r\n            if (!this.asg) {\r\n                return;\r\n            }\r\n            return this.asg.modalVisible;\r\n        },\r\n        // set modal visible\r\n        set: function (value) {\r\n            if (!this.asg) {\r\n                return;\r\n            }\r\n            this.asg.modalVisible = value;\r\n            this.asg.setHash();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ModalController.prototype, \"selected\", {\r\n        // get selected image\r\n        get: function () {\r\n            if (!this.asg) {\r\n                return;\r\n            }\r\n            return this.asg.selected;\r\n        },\r\n        // set selected image\r\n        set: function (v) {\r\n            if (!this.asg) {\r\n                return;\r\n            }\r\n            this.asg.selected = v;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ModalController.prototype, \"config\", {\r\n        // get modal config\r\n        get: function () {\r\n            return this.asg.options[this.type];\r\n        },\r\n        // set modal config\r\n        set: function (value) {\r\n            this.asg.options[this.type] = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return ModalController;\r\n}());\r\nexports.ModalController = ModalController;\r\nexports.asgModalComponent = {\r\n    controller: ['asgService', '$window', '$rootScope', '$scope', ModalController],\r\n    templateUrl: 'views/asg-modal.html',\r\n    transclude: true,\r\n    bindings: {\r\n        id: '@?',\r\n        items: '=?',\r\n        options: '=?',\r\n        selected: '=?',\r\n        visible: '=?',\r\n        baseUrl: '@?'\r\n    }\r\n};\r\n\n\n//# sourceURL=webpack:///./src/asg-modal.ts?")},"./src/asg-panel.ts":function(module,exports,__webpack_require__){"use strict";eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar PanelController = /** @class */ (function () {\r\n    function PanelController(service, $scope) {\r\n        this.service = service;\r\n        this.$scope = $scope;\r\n        this.type = 'panel';\r\n        this.template = 'views/asg-panel.html';\r\n    }\r\n    PanelController.prototype.$onInit = function () {\r\n        // get service instance\r\n        this.asg = this.service.getInstance(this);\r\n    };\r\n    // set selected image\r\n    PanelController.prototype.setSelected = function (index, $event) {\r\n        this.asg.modalClick($event);\r\n        if (this.config.click.modal) {\r\n            this.asg.modalOpen(index);\r\n            return;\r\n        }\r\n        if (this.config.click.select) {\r\n            this.asg.setSelected(index);\r\n        }\r\n    };\r\n    PanelController.prototype.hover = function (index, $event) {\r\n        if (this.config.hover.preload === true) {\r\n            this.asg.hoverPreload(index);\r\n        }\r\n        if (this.config.hover.select === true) {\r\n            this.asg.setSelected(index);\r\n        }\r\n    };\r\n    Object.defineProperty(PanelController.prototype, \"config\", {\r\n        // get panel config\r\n        get: function () {\r\n            return this.asg.options[this.type];\r\n        },\r\n        // set panel config\r\n        set: function (value) {\r\n            this.asg.options[this.type] = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(PanelController.prototype, \"selected\", {\r\n        // get selected image\r\n        get: function () {\r\n            if (!this.asg) {\r\n                return;\r\n            }\r\n            return this.asg.selected;\r\n        },\r\n        // set selected image\r\n        set: function (v) {\r\n            if (!this.asg) {\r\n                return;\r\n            }\r\n            this.asg.selected = v;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return PanelController;\r\n}());\r\nexports.PanelController = PanelController;\r\nexports.asgPanelComponent = {\r\n    controller: ['asgService', '$scope', PanelController],\r\n    template: '<div class=\"asg-panel {{ $ctrl.asg.classes }}\" ng-mouseover=\"$ctrl.asg.over.panel = true;\" ng-mouseleave=\"$ctrl.asg.over.panel = false;\" ng-show=\"$ctrl.config.visible\"><div ng-include=\"$ctrl.template\"></div><ng-transclude></ng-transclude></div>',\r\n    transclude: true,\r\n    bindings: {\r\n        id: '@',\r\n        items: '=?',\r\n        options: '=?',\r\n        selected: '=?',\r\n        visible: '=?',\r\n        template: '@?',\r\n        baseUrl: '@?'\r\n    }\r\n};\r\n\n\n//# sourceURL=webpack:///./src/asg-panel.ts?")},"./src/asg-service.ts":function(module,exports,__webpack_require__){"use strict";eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar angular_1 = __webpack_require__(/*! angular */ \"angular\");\r\n// service controller\r\nvar ServiceController = /** @class */ (function () {\r\n    function ServiceController(timeout, interval, location, $rootScope, $window) {\r\n        var _this = this;\r\n        this.timeout = timeout;\r\n        this.interval = interval;\r\n        this.location = location;\r\n        this.$rootScope = $rootScope;\r\n        this.$window = $window;\r\n        this.slug = 'asg';\r\n        this.files = [];\r\n        this.modalAvailable = false;\r\n        this.modalInitialized = false;\r\n        this.instances = {};\r\n        this._visible = false;\r\n        this.first = false;\r\n        this.editing = false;\r\n        this.options = null;\r\n        this.optionsLoaded = false;\r\n        this.defaults = {\r\n            debug: false,\r\n            hashUrl: true,\r\n            baseUrl: '',\r\n            fields: {\r\n                source: {\r\n                    modal: 'url',\r\n                    panel: 'url',\r\n                    image: 'url',\r\n                    placeholder: null // image url for preload lowres image\r\n                },\r\n                title: 'title',\r\n                description: 'description',\r\n            },\r\n            autoplay: {\r\n                enabled: false,\r\n                delay: 4100 // autoplay delay in millisecond\r\n            },\r\n            theme: 'default',\r\n            preloadNext: false,\r\n            preloadDelay: 770,\r\n            loadingImage: 'preload.svg',\r\n            preload: [],\r\n            modal: {\r\n                title: '',\r\n                subtitle: '',\r\n                caption: {\r\n                    disabled: false,\r\n                    visible: true,\r\n                    position: 'top' // caption position [top, bottom]\r\n                },\r\n                header: {\r\n                    enabled: true,\r\n                    dynamic: false,\r\n                    buttons: ['playstop', 'index', 'prev', 'next', 'pin', 'size', 'transition', 'thumbnails', 'fullscreen', 'help', 'close'],\r\n                },\r\n                help: false,\r\n                arrows: {\r\n                    enabled: true,\r\n                    preload: true,\r\n                },\r\n                click: {\r\n                    close: true // when click on the image close the modal\r\n                },\r\n                thumbnail: {\r\n                    height: 50,\r\n                    index: false,\r\n                    enabled: true,\r\n                    dynamic: false,\r\n                    autohide: true,\r\n                    click: {\r\n                        select: true,\r\n                        modal: false // open modal when true\r\n                    },\r\n                    hover: {\r\n                        preload: true,\r\n                        select: false // set selected image on mouseover when true\r\n                    },\r\n                },\r\n                transition: 'slideLR',\r\n                size: 'cover',\r\n                keycodes: {\r\n                    exit: [27],\r\n                    playpause: [80],\r\n                    forward: [32, 39],\r\n                    backward: [37],\r\n                    first: [38, 36],\r\n                    last: [40, 35],\r\n                    fullscreen: [13],\r\n                    menu: [77],\r\n                    caption: [67],\r\n                    help: [72],\r\n                    size: [83],\r\n                    transition: [84] // t\r\n                }\r\n            },\r\n            thumbnail: {\r\n                height: 50,\r\n                index: false,\r\n                dynamic: false,\r\n                autohide: false,\r\n                click: {\r\n                    select: true,\r\n                    modal: false // open modal when true\r\n                },\r\n                hover: {\r\n                    preload: true,\r\n                    select: false // set selected image on mouseover when true\r\n                },\r\n            },\r\n            panel: {\r\n                visible: true,\r\n                item: {\r\n                    class: 'col-md-3',\r\n                    caption: false,\r\n                    index: false,\r\n                },\r\n                hover: {\r\n                    preload: true,\r\n                    select: false // set selected image on mouseover when true\r\n                },\r\n                click: {\r\n                    select: false,\r\n                    modal: true // open modal when true\r\n                },\r\n            },\r\n            image: {\r\n                transition: 'slideLR',\r\n                size: 'cover',\r\n                arrows: {\r\n                    enabled: true,\r\n                    preload: true,\r\n                },\r\n                click: {\r\n                    modal: true // when click on the image open the modal window\r\n                },\r\n                height: null,\r\n                heightMin: null,\r\n                heightAuto: {\r\n                    initial: true,\r\n                    onresize: false // calculate div height on window resize\r\n                }\r\n            }\r\n        };\r\n        // available image sizes\r\n        this.sizes = [\r\n            'contain',\r\n            'cover',\r\n            'auto',\r\n            'stretch'\r\n        ];\r\n        // available themes\r\n        this.themes = [\r\n            'default',\r\n            'darkblue',\r\n            'whitegold'\r\n        ];\r\n        // available transitions\r\n        this.transitions = [\r\n            'no',\r\n            'fadeInOut',\r\n            'zoomIn',\r\n            'zoomOut',\r\n            'zoomInOut',\r\n            'rotateLR',\r\n            'rotateTB',\r\n            'rotateZY',\r\n            'slideLR',\r\n            'slideTB',\r\n            'flipX',\r\n            'flipY'\r\n        ];\r\n        this.events = {\r\n            CONFIG_LOAD: 'ASG-config-load-',\r\n            AUTOPLAY_START: 'ASG-autoplay-start-',\r\n            AUTOPLAY_STOP: 'ASG-autoplay-stop-',\r\n            PARSE_IMAGES: 'ASG-parse-images-',\r\n            LOAD_IMAGE: 'ASG-load-image-',\r\n            FIRST_IMAGE: 'ASG-first-image-',\r\n            CHANGE_IMAGE: 'ASG-change-image-',\r\n            MODAL_OPEN: 'ASG-modal-open-',\r\n            MODAL_CLOSE: 'ASG-modal-close-',\r\n            THUMBNAIL_MOVE: 'ASG-thumbnail-move-',\r\n            GALLERY_UPDATED: 'ASG-gallery-updated-',\r\n            GALLERY_EDIT: 'ASG-gallery-edit',\r\n        };\r\n        angular_1.element($window).bind('resize', function (event) {\r\n            _this.thumbnailsMove(200);\r\n        });\r\n    }\r\n    ServiceController.prototype.parseHash = function () {\r\n        var _this = this;\r\n        if (!this.id) {\r\n            return;\r\n        }\r\n        if (!this.options.hashUrl) {\r\n            return;\r\n        }\r\n        var hash = this.location.hash();\r\n        var parts = hash ? hash.split('-') : null;\r\n        if (parts === null) {\r\n            return;\r\n        }\r\n        if (parts[0] !== this.slug) {\r\n            return;\r\n        }\r\n        if (parts.length !== 3) {\r\n            return;\r\n        }\r\n        if (parts[1] !== this.id) {\r\n            return;\r\n        }\r\n        var index = parseInt(parts[2], 10);\r\n        if (!angular_1.isNumber(index)) {\r\n            return;\r\n        }\r\n        this.timeout(function () {\r\n            index--;\r\n            _this.selected = index;\r\n            _this.modalOpen(index);\r\n        }, 20);\r\n    };\r\n    // calculate object hash id\r\n    ServiceController.prototype.objectHashId = function (object) {\r\n        var string = JSON.stringify(object);\r\n        if (!string) {\r\n            return null;\r\n        }\r\n        var abc = string.replace(/[^a-zA-Z0-9]+/g, '');\r\n        var code = 0;\r\n        for (var i = 0, n = abc.length; i < n; i++) {\r\n            var charcode = abc.charCodeAt(i);\r\n            code += (charcode * i);\r\n        }\r\n        return 'id' + code.toString(21);\r\n    };\r\n    // get service instance for current gallery by component id\r\n    ServiceController.prototype.getInstance = function (component) {\r\n        if (!component.id) {\r\n            // get parent asg component id\r\n            if (component.$scope && component.$scope.$parent && component.$scope.$parent.$parent && component.$scope.$parent.$parent.$ctrl) {\r\n                component.id = component.$scope.$parent.$parent.$ctrl.id;\r\n            }\r\n            else {\r\n                component.id = this.objectHashId(component.options);\r\n            }\r\n        }\r\n        var id = component.id;\r\n        var instance = this.instances[id];\r\n        // new instance and set options and items\r\n        if (instance === undefined) {\r\n            instance = new ServiceController(this.timeout, this.interval, this.location, this.$rootScope, this.$window);\r\n            instance.id = id;\r\n        }\r\n        if (component.baseUrl) {\r\n            component.options.baseUrl = component.baseUrl;\r\n        }\r\n        instance.setOptions(component.options);\r\n        instance.setItems(component.items);\r\n        instance.selected = component.selected ? component.selected : 0;\r\n        instance.parseHash();\r\n        if (instance.options) {\r\n            instance.loadImages(instance.options.preload);\r\n            if (instance.options.autoplay && instance.options.autoplay.enabled && !instance.autoplay) {\r\n                instance.autoPlayStart();\r\n            }\r\n        }\r\n        // update images when edit event\r\n        instance.$rootScope.$on(this.events.GALLERY_EDIT, function (event, data) {\r\n            if (id === data.id && component.items) {\r\n                instance.editGallery(data, component);\r\n            }\r\n        });\r\n        this.instances[id] = instance;\r\n        return instance;\r\n    };\r\n    // prepare images array\r\n    ServiceController.prototype.setItems = function (items) {\r\n        if (!items) {\r\n            return;\r\n        }\r\n        this.items = items;\r\n        this.prepareItems();\r\n    };\r\n    // options setup\r\n    ServiceController.prototype.setOptions = function (options) {\r\n        // if options already setup\r\n        if (this.optionsLoaded) {\r\n            return;\r\n        }\r\n        if (options) {\r\n            options = angular_1.merge(angular_1.copy(this.defaults), options);\r\n            this.options = angular_1.copy(options);\r\n            if (options.modal && options.modal.header && options.modal.header.buttons) {\r\n                this.options.modal.header.buttons = options.modal.header.buttons;\r\n            }\r\n            this.optionsLoaded = true;\r\n        }\r\n        else {\r\n            this.options = angular_1.copy(this.defaults);\r\n        }\r\n        // important!\r\n        options = this.options;\r\n        this.event(this.events.CONFIG_LOAD, this.options);\r\n        return this.options;\r\n    };\r\n    Object.defineProperty(ServiceController.prototype, \"selected\", {\r\n        // get selected image\r\n        get: function () {\r\n            return this._selected;\r\n        },\r\n        // set selected image\r\n        set: function (v) {\r\n            v = this.normalize(v);\r\n            var prev = this._selected;\r\n            this._selected = v;\r\n            this.loadImage(this._selected);\r\n            this.preload();\r\n            if (prev !== this._selected) {\r\n                this.thumbnailsMove();\r\n                this.event(this.events.CHANGE_IMAGE, {\r\n                    index: v,\r\n                    file: this.file\r\n                });\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    // force select image\r\n    ServiceController.prototype.forceSelect = function (index) {\r\n        index = this.normalize(index);\r\n        this._selected = index;\r\n        this.loadImage(this._selected);\r\n        this.preload();\r\n        this.event(this.events.CHANGE_IMAGE, {\r\n            index: index,\r\n            file: this.file\r\n        });\r\n    };\r\n    ServiceController.prototype.setSelected = function (index) {\r\n        this.autoPlayStop();\r\n        this.direction = index > this.selected ? 'forward' : 'backward';\r\n        this.selected = index;\r\n        this.setHash();\r\n    };\r\n    // go to backward\r\n    ServiceController.prototype.toBackward = function (stop) {\r\n        if (stop) {\r\n            this.autoPlayStop();\r\n        }\r\n        this.direction = 'backward';\r\n        this.selected--;\r\n        this.setHash();\r\n    };\r\n    // go to forward\r\n    ServiceController.prototype.toForward = function (stop) {\r\n        if (stop) {\r\n            this.autoPlayStop();\r\n        }\r\n        this.direction = 'forward';\r\n        this.selected++;\r\n        this.setHash();\r\n    };\r\n    // go to first\r\n    ServiceController.prototype.toFirst = function (stop) {\r\n        if (stop) {\r\n            this.autoPlayStop();\r\n        }\r\n        this.direction = 'backward';\r\n        this.selected = 0;\r\n        this.setHash();\r\n    };\r\n    // go to last\r\n    ServiceController.prototype.toLast = function (stop) {\r\n        if (stop) {\r\n            this.autoPlayStop();\r\n        }\r\n        this.direction = 'forward';\r\n        this.selected = this.items.length - 1;\r\n        this.setHash();\r\n    };\r\n    ServiceController.prototype.setHash = function () {\r\n        if (this.modalVisible && this.options.hashUrl) {\r\n            this.location.hash([this.slug, this.id, this.selected + 1].join('-'));\r\n        }\r\n    };\r\n    ServiceController.prototype.autoPlayToggle = function () {\r\n        if (this.options.autoplay.enabled) {\r\n            this.autoPlayStop();\r\n        }\r\n        else {\r\n            this.autoPlayStart();\r\n        }\r\n    };\r\n    ServiceController.prototype.autoPlayStop = function () {\r\n        if (!this.autoplay) {\r\n            return;\r\n        }\r\n        this.interval.cancel(this.autoplay);\r\n        this.options.autoplay.enabled = false;\r\n        this.autoplay = null;\r\n        this.event(this.events.AUTOPLAY_STOP, { index: this.selected, file: this.file });\r\n    };\r\n    ServiceController.prototype.autoPlayStart = function () {\r\n        var _this = this;\r\n        if (this.autoplay) {\r\n            return;\r\n        }\r\n        this.options.autoplay.enabled = true;\r\n        this.autoplay = this.interval(function () {\r\n            _this.toForward();\r\n        }, this.options.autoplay.delay);\r\n        this.event(this.events.AUTOPLAY_START, { index: this.selected, file: this.file });\r\n    };\r\n    ServiceController.prototype.prepareItems = function () {\r\n        var length = this.items.length;\r\n        for (var key = 0; key < length; key++) {\r\n            this.addImage(this.items[key]);\r\n        }\r\n        this.event(this.events.PARSE_IMAGES, this.files);\r\n    };\r\n    // preload the image when mouseover\r\n    ServiceController.prototype.hoverPreload = function (index) {\r\n        this.loadImage(index);\r\n    };\r\n    // image preload\r\n    ServiceController.prototype.preload = function (wait) {\r\n        var _this = this;\r\n        var index = this.direction === 'forward' ? this.selected + 1 : this.selected - 1;\r\n        if (this.options.preloadNext === true) {\r\n            this.timeout(function () {\r\n                _this.loadImage(index);\r\n            }, (wait !== undefined) ? wait : this.options.preloadDelay);\r\n        }\r\n    };\r\n    ServiceController.prototype.normalize = function (index) {\r\n        var last = this.files.length - 1;\r\n        if (index > last) {\r\n            return (index - last) - 1;\r\n        }\r\n        if (index < 0) {\r\n            return last - Math.abs(index) + 1;\r\n        }\r\n        return index;\r\n    };\r\n    ServiceController.prototype.loadImages = function (indexes, type) {\r\n        if (!indexes || indexes.length === 0) {\r\n            return;\r\n        }\r\n        var self = this;\r\n        indexes.forEach(function (index) {\r\n            self.loadImage(index);\r\n        });\r\n    };\r\n    ServiceController.prototype.loadImage = function (index, callback) {\r\n        var _this = this;\r\n        index = index ? index : this.selected;\r\n        index = this.normalize(index);\r\n        if (!this.files[index]) {\r\n            this.log('invalid file index', { index: index });\r\n            return;\r\n        }\r\n        if (this.modalVisible) {\r\n            if (this.files[index].loaded.modal === true) {\r\n                return;\r\n            }\r\n            var modal_1 = new Image();\r\n            modal_1.src = this.files[index].source.modal;\r\n            modal_1.addEventListener('load', function (event) {\r\n                _this.afterLoad(index, 'modal', modal_1);\r\n            });\r\n        }\r\n        else {\r\n            if (this.files[index].loaded.image === true) {\r\n                return;\r\n            }\r\n            var image_1 = new Image();\r\n            image_1.src = this.files[index].source.image;\r\n            image_1.addEventListener('load', function () {\r\n                _this.afterLoad(index, 'image', image_1);\r\n            });\r\n        }\r\n    };\r\n    // get file name\r\n    ServiceController.prototype.getFilename = function (index, type) {\r\n        type = type ? type : 'modal';\r\n        var fileparts = this.files[index].source[type].split('/');\r\n        var filename = fileparts[fileparts.length - 1];\r\n        return filename;\r\n    };\r\n    // get file extension\r\n    ServiceController.prototype.getExtension = function (index, type) {\r\n        type = type ? type : 'modal';\r\n        var fileparts = this.files[index].source[type].split('.');\r\n        var extension = fileparts[fileparts.length - 1];\r\n        return extension;\r\n    };\r\n    // after load image\r\n    ServiceController.prototype.afterLoad = function (index, type, image) {\r\n        if (this.files[index].loaded[type] === true) {\r\n            this.files[index].loaded[type] = true;\r\n            return;\r\n        }\r\n        this.files[index].loaded[type] = true;\r\n        if (type === 'modal') {\r\n            this.files[index].width = image.width;\r\n            this.files[index].height = image.height;\r\n            this.files[index].name = this.getFilename(index, type);\r\n            this.files[index].extension = this.getExtension(index, type);\r\n            this.files[index].download = this.files[index].source.modal;\r\n        }\r\n        var data = { type: type, index: index, file: this.file, img: image };\r\n        if (!this.first) {\r\n            this.first = true;\r\n            this.event(this.events.FIRST_IMAGE, data);\r\n        }\r\n        this.event(this.events.LOAD_IMAGE, data);\r\n    };\r\n    Object.defineProperty(ServiceController.prototype, \"isSingle\", {\r\n        // is single?\r\n        get: function () {\r\n            return this.files.length > 1 ? false : true;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    // get the download link\r\n    ServiceController.prototype.downloadLink = function () {\r\n        if (this.selected !== undefined && this.files.length > 0) {\r\n            return this.files[this.selected].source.modal;\r\n        }\r\n    };\r\n    Object.defineProperty(ServiceController.prototype, \"file\", {\r\n        // get the file\r\n        get: function () {\r\n            return this.files[this.selected];\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    // toggle element visible\r\n    ServiceController.prototype.toggle = function (el) {\r\n        this.options[el].visible = !this.options[el].visible;\r\n    };\r\n    Object.defineProperty(ServiceController.prototype, \"modalVisible\", {\r\n        // get visible\r\n        get: function () {\r\n            return this._visible;\r\n        },\r\n        // set visible\r\n        set: function (value) {\r\n            this._visible = value;\r\n            // set index 0 if !selected\r\n            this.selected = this.selected ? this.selected : 0;\r\n            var body = document.body;\r\n            var className = ' asg-yhidden';\r\n            if (value) {\r\n                if (body.className.indexOf(className) < 0) {\r\n                    body.className = body.className + className;\r\n                }\r\n                this.modalInit();\r\n            }\r\n            else {\r\n                body.className = body.className.replace(className, '');\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ServiceController.prototype, \"theme\", {\r\n        // get theme\r\n        get: function () {\r\n            return this.options.theme;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ServiceController.prototype, \"classes\", {\r\n        // get classes\r\n        get: function () {\r\n            return this.options.theme + ' ' + this.id + (this.editing ? ' editing' : '');\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    // get preload style\r\n    ServiceController.prototype.preloadStyle = function (file, type) {\r\n        var style = {};\r\n        if (file.source.color) {\r\n            style['background-color'] = file.source.color;\r\n        }\r\n        if (this.options.loadingImage && file.loaded[type] === false) {\r\n            style['background-image'] = 'url(' + this.options.loadingImage + ')';\r\n        }\r\n        return style;\r\n    };\r\n    // get placeholder style\r\n    ServiceController.prototype.placeholderStyle = function (file) {\r\n        var style = {};\r\n        if (file.source.color) {\r\n            style['background-color'] = file.source.color;\r\n        }\r\n        if (file.source.placeholder) {\r\n            style['background-image'] = 'url(' + file.source.placeholder + ')';\r\n        }\r\n        return style;\r\n    };\r\n    // initialize the gallery\r\n    ServiceController.prototype.modalInit = function () {\r\n        var _this = this;\r\n        var self = this;\r\n        this.timeout(function () {\r\n            self.setFocus();\r\n        }, 100);\r\n        this.thumbnailsMove(440);\r\n        this.timeout(function () {\r\n            _this.modalInitialized = true;\r\n        }, 460);\r\n    };\r\n    ServiceController.prototype.modalOpen = function (index) {\r\n        if (!this.modalAvailable) {\r\n            return;\r\n        }\r\n        this.selected = index !== undefined ? index : this.selected;\r\n        this.modalVisible = true;\r\n        this.loadImage();\r\n        this.setHash();\r\n        this.event(this.events.MODAL_OPEN, { index: this.selected });\r\n    };\r\n    ServiceController.prototype.modalClose = function () {\r\n        if (this.options.hashUrl) {\r\n            this.location.hash('');\r\n        }\r\n        this.modalInitialized = false;\r\n        this.modalVisible = false;\r\n        this.loadImage();\r\n        this.event(this.events.MODAL_CLOSE, { index: this.selected });\r\n    };\r\n    // move thumbnails to correct position\r\n    ServiceController.prototype.thumbnailsMove = function (delay) {\r\n        var _this = this;\r\n        var move = function () {\r\n            var containers = _this.el('div.asg-thumbnail.' + _this.id);\r\n            if (!containers.length) {\r\n                return;\r\n            }\r\n            for (var i = 0; i < containers.length; i++) {\r\n                var container = containers[i];\r\n                if (container.offsetWidth) {\r\n                    var items = container.querySelector('div.items');\r\n                    var item = container.querySelector('div.item');\r\n                    var thumbnail = void 0, moveX = void 0, remain = void 0;\r\n                    if (item) {\r\n                        if (items.scrollWidth > container.offsetWidth) {\r\n                            thumbnail = items.scrollWidth / _this.files.length;\r\n                            moveX = (container.offsetWidth / 2) - (_this.selected * thumbnail) - thumbnail / 2;\r\n                            remain = items.scrollWidth + moveX;\r\n                            moveX = moveX > 0 ? 0 : moveX;\r\n                            moveX = remain < container.offsetWidth ? container.offsetWidth - items.scrollWidth : moveX;\r\n                        }\r\n                        else {\r\n                            thumbnail = _this.getRealWidth(item);\r\n                            moveX = (container.offsetWidth - thumbnail * _this.files.length) / 2;\r\n                        }\r\n                        items.style.left = moveX + 'px';\r\n                        _this.event(_this.events.THUMBNAIL_MOVE, {\r\n                            thumbnail: thumbnail,\r\n                            move: moveX,\r\n                            remain: remain,\r\n                            container: container.offsetWidth,\r\n                            items: items.scrollWidth\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        };\r\n        if (delay) {\r\n            this.timeout(function () {\r\n                move();\r\n            }, delay);\r\n        }\r\n        else {\r\n            move();\r\n        }\r\n    };\r\n    ServiceController.prototype.modalClick = function ($event) {\r\n        if ($event) {\r\n            $event.stopPropagation();\r\n        }\r\n        this.setFocus();\r\n    };\r\n    // set the focus\r\n    ServiceController.prototype.setFocus = function () {\r\n        if (this.modalVisible) {\r\n            var el = this.el('div.asg-modal.' + this.id + ' .keyInput')[0];\r\n            if (el) {\r\n                angular_1.element(el)[0].focus();\r\n            }\r\n        }\r\n    };\r\n    ServiceController.prototype.event = function (event, data) {\r\n        event = event + this.id;\r\n        this.$rootScope.$emit(event, data);\r\n        this.log(event, data);\r\n    };\r\n    ServiceController.prototype.log = function (event, data) {\r\n        if (this.options.debug) {\r\n            console.log(event, data ? data : null);\r\n        }\r\n    };\r\n    // get element\r\n    ServiceController.prototype.el = function (selector) {\r\n        return document.querySelectorAll(selector);\r\n    };\r\n    // calculating element real width\r\n    ServiceController.prototype.getRealWidth = function (item) {\r\n        var style = item.currentStyle || window.getComputedStyle(item), width = item.offsetWidth, margin = parseFloat(style.marginLeft) + parseFloat(style.marginRight), \r\n        // padding = parseFloat(style.paddingLeft) + parseFloat(style.paddingRight),\r\n        border = parseFloat(style.borderLeftWidth) + parseFloat(style.borderRightWidth);\r\n        return width + margin + border;\r\n    };\r\n    // calculating element real height\r\n    ServiceController.prototype.getRealHeight = function (item) {\r\n        var style = item.currentStyle || window.getComputedStyle(item), height = item.offsetHeight, margin = parseFloat(style.marginTop) + parseFloat(style.marginBottom), \r\n        // padding = parseFloat(style.paddingTop) + parseFloat(style.paddingBottom),\r\n        border = parseFloat(style.borderTopWidth) + parseFloat(style.borderBottomWidth);\r\n        return height + margin + border;\r\n    };\r\n    // edit gallery\r\n    ServiceController.prototype.editGallery = function (edit, component) {\r\n        var _this = this;\r\n        this.editing = true;\r\n        var selected = this.selected;\r\n        if (edit.options !== undefined) {\r\n            this.optionsLoaded = false;\r\n            this.setOptions(edit.options);\r\n        }\r\n        if (edit.delete !== undefined) {\r\n            this.deleteImage(edit.delete);\r\n        }\r\n        if (edit.add) {\r\n            selected = this.files.length;\r\n            var editLength = edit.add.length;\r\n            for (var editKey = 0; editKey < editLength; editKey++) {\r\n                this.addImage(edit.add[editKey]);\r\n            }\r\n        }\r\n        if (edit.update) {\r\n            this.selected = null;\r\n            var length_1 = edit.update.length;\r\n            for (var key = 0; key < length_1; key++) {\r\n                this.addImage(edit.update[key], key);\r\n            }\r\n            var count = this.files.length - edit.update.length;\r\n            if (count > 0) {\r\n                this.deleteImage(length_1, count);\r\n            }\r\n        }\r\n        this.timeout(function () {\r\n            selected = _this.files[selected] ? selected : (selected >= _this.files.length ? selected - 1 : selected + 1);\r\n            _this.forceSelect(_this.files[selected] ? selected : 0);\r\n            _this.editing = false;\r\n            _this.event(_this.events.GALLERY_UPDATED, edit);\r\n            _this.thumbnailsMove(edit.delayThumbnails !== undefined ? edit.delayThumbnails : 220);\r\n        }, (edit.delayRefresh !== undefined ? edit.delayRefresh : 440));\r\n    };\r\n    // delete image\r\n    ServiceController.prototype.deleteImage = function (index, count) {\r\n        index = index === null || index === undefined ? this.selected : index;\r\n        this.files.splice(index, count ? count : 1);\r\n    };\r\n    // add image\r\n    ServiceController.prototype.addImage = function (value, index) {\r\n        if (value === undefined || value === null) {\r\n            return;\r\n        }\r\n        var self = this;\r\n        if (angular_1.isString(value) === true) {\r\n            value = { source: { modal: value } };\r\n        }\r\n        var getAvailableSource = function (type, src) {\r\n            if (src[type]) {\r\n                return self.options.baseUrl + src[type];\r\n            }\r\n            else {\r\n                if (type === 'panel') {\r\n                    type = 'image';\r\n                    if (src[type]) {\r\n                        return self.options.baseUrl + src[type];\r\n                    }\r\n                }\r\n                if (type === 'image') {\r\n                    type = 'modal';\r\n                    if (src[type]) {\r\n                        return self.options.baseUrl + src[type];\r\n                    }\r\n                }\r\n                if (type === 'modal') {\r\n                    type = 'image';\r\n                    if (src[type]) {\r\n                        return self.options.baseUrl + src[type];\r\n                    }\r\n                }\r\n            }\r\n        };\r\n        if (!value.source) {\r\n            value.source = {\r\n                modal: value[self.options.fields.source.modal],\r\n                panel: value[self.options.fields.source.panel],\r\n                image: value[self.options.fields.source.image],\r\n                placeholder: value[self.options.fields.source.placeholder]\r\n            };\r\n        }\r\n        var source = {\r\n            modal: getAvailableSource('modal', value.source),\r\n            panel: getAvailableSource('panel', value.source),\r\n            image: getAvailableSource('image', value.source),\r\n            color: value.color ? value.color : 'transparent',\r\n            placeholder: value.placeholder ? self.options.baseUrl + value.placeholder : null\r\n        };\r\n        if (!source.modal) {\r\n            self.log('invalid image data', { source: source, value: value });\r\n            return;\r\n        }\r\n        var parts = source.modal.split('/');\r\n        var filename = parts[parts.length - 1];\r\n        var title, description;\r\n        if (self.options.fields !== undefined) {\r\n            title = value[self.options.fields.title] ? value[self.options.fields.title] : filename;\r\n        }\r\n        else {\r\n            title = filename;\r\n        }\r\n        if (self.options.fields !== undefined) {\r\n            description = value[self.options.fields.description] ? value[self.options.fields.description] : null;\r\n        }\r\n        else {\r\n            description = null;\r\n        }\r\n        var file = {\r\n            source: source,\r\n            title: title,\r\n            description: description,\r\n            loaded: {\r\n                modal: false,\r\n                panel: false,\r\n                image: false\r\n            }\r\n        };\r\n        if (index !== undefined && this.files[index] !== undefined) {\r\n            this.files[index] = file;\r\n        }\r\n        else {\r\n            this.files.push(file);\r\n        }\r\n    };\r\n    return ServiceController;\r\n}());\r\nexports.ServiceController = ServiceController;\r\nexports.asgService = ['$timeout', '$interval', '$location', '$rootScope', '$window', ServiceController];\r\n\n\n//# sourceURL=webpack:///./src/asg-service.ts?")},"./src/asg-thumbnail.ts":function(module,exports,__webpack_require__){"use strict";eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar ThumbnailController = /** @class */ (function () {\r\n    function ThumbnailController(service, $scope, $element) {\r\n        this.service = service;\r\n        this.$scope = $scope;\r\n        this.$element = $element;\r\n        this.type = 'thumbnail';\r\n        this.modal = false;\r\n        this.template = 'views/asg-thumbnail.html';\r\n    }\r\n    ThumbnailController.prototype.$onInit = function () {\r\n        // get service instance\r\n        this.asg = this.service.getInstance(this);\r\n        // get parent asg component (modal)\r\n        if (this.$scope && this.$scope.$parent && this.$scope.$parent.$parent && this.$scope.$parent.$parent.$ctrl) {\r\n            this.modal = this.$scope.$parent.$parent.$ctrl.type === 'modal' ? true : false;\r\n        }\r\n    };\r\n    // set selected image\r\n    ThumbnailController.prototype.setSelected = function (index, $event) {\r\n        this.asg.modalClick($event);\r\n        if (this.config.click.modal) {\r\n            this.asg.modalOpen(index);\r\n            return;\r\n        }\r\n        if (this.config.click.select) {\r\n            this.asg.setSelected(index);\r\n        }\r\n    };\r\n    // prelod when mouseover and set selected if enabled\r\n    ThumbnailController.prototype.hover = function (index, $event) {\r\n        if (this.config.hover.preload === true) {\r\n            this.asg.hoverPreload(index);\r\n        }\r\n        if (this.config.hover.select === true) {\r\n            this.asg.setSelected(index);\r\n        }\r\n    };\r\n    Object.defineProperty(ThumbnailController.prototype, \"config\", {\r\n        // get thumbnail config\r\n        get: function () {\r\n            return this.modal ? this.asg.options.modal[this.type] : this.asg.options[this.type];\r\n        },\r\n        // set thumbnail config\r\n        set: function (value) {\r\n            if (this.modal) {\r\n                this.asg.options[this.type] = value;\r\n            }\r\n            else {\r\n                this.asg.options.modal[this.type] = value;\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ThumbnailController.prototype, \"selected\", {\r\n        // get selected image\r\n        get: function () {\r\n            if (!this.asg) {\r\n                return;\r\n            }\r\n            return this.asg.selected;\r\n        },\r\n        // set selected image\r\n        set: function (v) {\r\n            if (!this.asg) {\r\n                return;\r\n            }\r\n            this.asg.selected = v;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ThumbnailController.prototype, \"dynamic\", {\r\n        // get above from config\r\n        get: function () {\r\n            return this.config.dynamic ? 'dynamic' : '';\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ThumbnailController.prototype, \"autohide\", {\r\n        // autohide and isSingle == true ?\r\n        get: function () {\r\n            return this.config.autohide && this.asg.isSingle ? true : false;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ThumbnailController.prototype, \"classes\", {\r\n        // get classes\r\n        get: function () {\r\n            var show = 'initialized';\r\n            if (this.modal) {\r\n                show = this.asg.modalInitialized ? 'initialized' : 'initializing';\r\n            }\r\n            return this.asg.classes + ' ' + this.dynamic + ' ' + show;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return ThumbnailController;\r\n}());\r\nexports.ThumbnailController = ThumbnailController;\r\nexports.asgThumbnailComponent = {\r\n    controller: ['asgService', '$scope', '$element', ThumbnailController],\r\n    template: '<div data-ng-if=\"!$ctrl.autohide\" class=\"asg-thumbnail {{ $ctrl.classes }}\" ng-click=\"$ctrl.asg.modalClick($event);\"><div ng-include=\"$ctrl.template\"></div></div>',\r\n    bindings: {\r\n        id: '@',\r\n        items: '=?',\r\n        options: '=?',\r\n        selected: '=?',\r\n        visible: '=?',\r\n        template: '@?',\r\n        baseUrl: '@?'\r\n    }\r\n};\r\n\n\n//# sourceURL=webpack:///./src/asg-thumbnail.ts?")},"./src/asg.ts":function(module,exports,__webpack_require__){"use strict";eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar angular_1 = __webpack_require__(/*! angular */ \"angular\");\r\nvar asg_bytes_1 = __webpack_require__(/*! ./asg-bytes */ \"./src/asg-bytes.ts\");\r\nvar asg_control_1 = __webpack_require__(/*! ./asg-control */ \"./src/asg-control.ts\");\r\nvar asg_service_1 = __webpack_require__(/*! ./asg-service */ \"./src/asg-service.ts\");\r\nvar asg_image_1 = __webpack_require__(/*! ./asg-image */ \"./src/asg-image.ts\");\r\nvar asg_info_1 = __webpack_require__(/*! ./asg-info */ \"./src/asg-info.ts\");\r\nvar asg_modal_1 = __webpack_require__(/*! ./asg-modal */ \"./src/asg-modal.ts\");\r\nvar asg_panel_1 = __webpack_require__(/*! ./asg-panel */ \"./src/asg-panel.ts\");\r\nvar asg_thumbnail_1 = __webpack_require__(/*! ./asg-thumbnail */ \"./src/asg-thumbnail.ts\");\r\nexports.moduleName = 'angularSuperGallery';\r\nexports.app = angular_1.module(exports.moduleName, [\r\n    'ngAnimate',\r\n    'ngTouch'\r\n]);\r\nexports.app.filter('asgBytes', asg_bytes_1.asgBytesFilter);\r\nexports.app.component('asgControl', asg_control_1.asgControlComponent);\r\nexports.app.service('asgService', asg_service_1.asgService);\r\nexports.app.component('asgImage', asg_image_1.asgImageComponent);\r\nexports.app.component('asgInfo', asg_info_1.asgInfoComponent);\r\nexports.app.component('asgModal', asg_modal_1.asgModalComponent);\r\nexports.app.component('asgPanel', asg_panel_1.asgPanelComponent);\r\nexports.app.component('asgThumbnail', asg_thumbnail_1.asgThumbnailComponent);\r\n\n\n//# sourceURL=webpack:///./src/asg.ts?")},angular:function(module,exports){eval("module.exports = angular;\n\n//# sourceURL=webpack:///external_%22angular%22?")}}),angular.module("angularSuperGallery").run(["$templateCache",function(n){n.put("views/asg-control.html",'<button ng-if="!$ctrl.asg.isSingle" class="btn btn-default btn-sm" ng-click="$ctrl.asg.autoPlayToggle()">\r\n\t<span ng-if="!$ctrl.asg.options.autoplay.enabled" class="glyphicon glyphicon-play"></span>\r\n\t<span ng-if="$ctrl.asg.options.autoplay.enabled" class="glyphicon glyphicon-stop"></span>\r\n</button>\r\n\r\n<button ng-if="!$ctrl.asg.isSingle" class="btn btn-default btn-sm" ng-click="$ctrl.asg.toFirst(true)">\r\n\t{{ $ctrl.asg.selected + 1 }} | {{ $ctrl.asg.files.length }}\r\n</button>\r\n\r\n<button ng-if="!$ctrl.asg.isSingle" class="btn btn-default btn-sm" ng-click="$ctrl.asg.toBackward(true)">\r\n\t<span class="glyphicon glyphicon-chevron-left"></span>\r\n</button>\r\n\r\n<button ng-if="!$ctrl.asg.isSingle" class="btn btn-default btn-sm" ng-click="$ctrl.asg.toForward(true)">\r\n\t<span class="glyphicon glyphicon-chevron-right"></span>\r\n</button>\r\n\r\n'),n.put("views/asg-help.html","<ul>\r\n\t<li>SPACE : forward</li>\r\n\t<li>RIGHT : forward</li>\r\n\t<li>LEFT : backward</li>\r\n\t<li>UP / HOME : first</li>\r\n\t<li>DOWN / END : last</li>\r\n\t<li>ENTER : toggle fullscreen</li>\r\n\t<li>ESC : exit</li>\r\n\t<li>p : play/pause</li>\r\n\t<li>t : change transition effect</li>\r\n\t<li>m : toggle menu</li>\r\n\t<li>s : toggle image size</li>\r\n\t<li>c : toggle caption</li>\r\n\t<li>h : toggle help</li>\r\n</ul>"),n.put("views/asg-image.html",'<div class="asg-image {{ $ctrl.asg.classes }}" ng-class="{\'modalon\' : $ctrl.modalAvailable }" ng-style="{\'min-height\' : $ctrl.config.heightMin + \'px\', \'height\' : $ctrl.height + \'px\'}">\r\n\r\n\t<div class="images {{ $ctrl.asg.direction }} {{ $ctrl.asg.options.image.transition }}" ng-swipe-left="$ctrl.asg.toForward(true)" ng-swipe-right="$ctrl.asg.toBackward(true)">\r\n\r\n\t\t<div class="img" ng-repeat="(key,file) in $ctrl.asg.files track by $index" ng-show="$ctrl.asg.selected == key" ng-style="$ctrl.asg.preloadStyle(file, \'image\')" ng-class="{\'loaded\' : file.loaded.image}">\r\n\r\n\t\t\t<div class="placeholder {{ $ctrl.config.size }}" ng-style="$ctrl.asg.placeholderStyle(file)"></div>\r\n\t\t\t<div class="source {{ $ctrl.config.size }}" ng-style="{\'background-image\': \'url(\' + file.source.image + \')\'}" ng-mouseover="$ctrl.asg.hoverPreload(key)" ng-click="$ctrl.modalOpen($event)"></div>\r\n\r\n\t\t</div>\r\n\t</div>\r\n\t<div class="arrows" ng-if="$ctrl.config.arrows.enabled" ng-swipe-left="$ctrl.asg.toForward(true)" ng-swipe-right="$ctrl.asg.toBackward(true)" ng-click="$ctrl.modalOpen($event)">\r\n\r\n\t\t<div ng-if="!$ctrl.asg.isSingle" class="toBackward">\r\n\r\n\t\t\t<button class="btn btn-default btn-lg pull-left visible-md visible-lg" ng-mouseover="$ctrl.hover($ctrl.asg.selected - 1, $event)" ng-click="$ctrl.toBackward(true, $event)">\r\n\t\t\t\t<span class="glyphicon glyphicon-chevron-left"></span>\r\n\t\t\t</button>\r\n\r\n\t\t\t<button class="btn btn-default btn-md pull-left visible-sm" ng-mouseover="$ctrl.hover($ctrl.asg.selected - 1, $event)" ng-click="$ctrl.toBackward(true, $event)">\r\n\t\t\t\t<span class="glyphicon glyphicon-chevron-left"></span>\r\n\t\t\t</button>\r\n\r\n\t\t</div>\r\n\r\n\t\t<div ng-if="!$ctrl.asg.isSingle" class="toForward">\r\n\r\n\t\t\t<button class="btn btn-default btn-lg pull-right visible-md visible-lg" ng-mouseover="$ctrl.hover($ctrl.asg.selected + 1, $event)" ng-click="$ctrl.toForward(true, $event)">\r\n\t\t\t\t<span class="glyphicon glyphicon-chevron-right"></span>\r\n\t\t\t</button>\r\n\r\n\t\t\t<button class="btn btn-default btn-md pull-right visible-sm" ng-mouseover="$ctrl.hover($ctrl.asg.selected + 1, $event)" ng-click="$ctrl.toForward(true, $event)">\r\n\t\t\t\t<span class="glyphicon glyphicon-chevron-right"></span>\r\n\t\t\t</button>\r\n\r\n\t\t</div>\r\n\r\n\t</div>\r\n\t<ng-transclude></ng-transclude>\r\n</div>\r\n\r\n\r\n\r\n'),n.put("views/asg-info.html",'<div class="row">\r\n\r\n\t<div class="col-md-12">\r\n\t\t<h3>{{ $ctrl.file.title }}</h3>\r\n\t</div>\r\n\r\n\t<div class="col-md-12">\r\n\t\t{{ $ctrl.file.description }}\r\n\t\t<a target="_blank" href="{{ $ctrl.download }}"><span class="glyphicon glyphicon-download"></span></a>\r\n\t</div>\r\n\r\n</div>\r\n\r\n\r\n'),n.put("views/asg-modal.html",'<div class="asg-modal {{ $ctrl.asg.classes }}" ng-class="$ctrl.getClass()" ng-click="$ctrl.imageClick($event);" ng-if="$ctrl.asg.modalVisible" ng-cloak>\r\n\r\n\t<div tabindex="1" class="keyInput" ng-keydown="$ctrl.keyUp($event)"></div>\r\n\r\n\t<div class="frame" ng-click="$ctrl.asg.modalClick($event);">\r\n\r\n\t\t<div class="header" ng-if="$ctrl.config.header.enabled" ng-click="$ctrl.asg.modalClick($event);">\r\n\r\n\t\t\t<span class="buttons visible-xs pull-right">\r\n\t\t\t\t<span ng-include="\'views/button/asg-index-xs.html\'"></span>\r\n\t\t\t</span>\r\n\r\n\t\t\t<span class="buttons hidden-xs pull-right">\r\n\t\t\t\t<span ng-repeat="item in ::$ctrl.config.header.buttons" ng-include="(\'views/button/asg-\' + item + \'.html\')"></span>\r\n            </span>\r\n\r\n\t\t\t<span ng-if="$ctrl.config.title">\r\n\t\t\t\t<span class="title">{{ $ctrl.config.title }}</span>\r\n\t\t\t\t<span class="subtitle hidden-xs" ng-if="$ctrl.config.subtitle">{{ $ctrl.config.subtitle }}</span>\r\n\t\t\t</span>\r\n\r\n\t\t</div>\r\n\r\n\t\t<div class="images {{ $ctrl.asg.direction }} {{ $ctrl.config.transition }}" ng-style="{\'top\': $ctrl.marginTop + \'px\', \'bottom\': $ctrl.marginBottom + \'px\'}" ng-mouseover="$ctrl.asg.over.modalImage = true;" ng-mouseleave="$ctrl.asg.over.modalImage = false;">\r\n\r\n\t\t\t<div class="help text-right" ng-click="$ctrl.toggleHelp($event)" ng-show="$ctrl.config.help" ng-include="\'views/asg-help.html\'"></div>\r\n\r\n\t\t\t<div class="arrows" ng-if="$ctrl.config.arrows.enabled" ng-swipe-left="$ctrl.asg.toForward(true)" ng-swipe-right="$ctrl.asg.toBackward(true)" ng-click="$ctrl.imageClick($event)">\r\n\r\n\t\t\t\t<div ng-if="!$ctrl.asg.isSingle" class="toBackward">\r\n\r\n\t\t\t\t\t<button class="btn btn-default btn-lg pull-left visible-md visible-lg" ng-mouseover="$ctrl.hover($ctrl.asg.selected - 1, $event)" ng-click="$ctrl.toBackward(true, $event)">\r\n\t\t\t\t\t\t<span class="glyphicon glyphicon-chevron-left"></span>\r\n\t\t\t\t\t</button>\r\n\r\n\t\t\t\t\t<button class="btn btn-default btn-md pull-left visible-sm" ng-mouseover="$ctrl.hover($ctrl.asg.selected - 1, $event)" ng-click="$ctrl.toBackward(true, $event)">\r\n\t\t\t\t\t\t<span class="glyphicon glyphicon-chevron-left"></span>\r\n\t\t\t\t\t</button>\r\n\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<div ng-if="!$ctrl.asg.isSingle" class="toForward">\r\n\r\n\t\t\t\t\t<button class="btn btn-default btn-lg pull-right visible-md visible-lg" ng-mouseover="$ctrl.hover($ctrl.asg.selected + 1, $event)" ng-click="$ctrl.toForward(true, $event)">\r\n\t\t\t\t\t\t<span class="glyphicon glyphicon-chevron-right"></span>\r\n\t\t\t\t\t</button>\r\n\r\n\t\t\t\t\t<button class="btn btn-default btn-md pull-right visible-sm" ng-mouseover="$ctrl.hover($ctrl.asg.selected + 1, $event)" ng-click="$ctrl.toForward(true, $event)">\r\n\t\t\t\t\t\t<span class="glyphicon glyphicon-chevron-right"></span>\r\n\t\t\t\t\t</button>\r\n\r\n\t\t\t\t</div>\r\n\r\n\t\t\t</div>\r\n\r\n\t\t\t<div class="img" ng-repeat="(key,file) in $ctrl.asg.files track by $index" ng-show="$ctrl.asg.selected == key" ng-style="$ctrl.asg.preloadStyle(file, \'modal\')" ng-class="{\'loaded\' : file.loaded.modal}">\r\n\r\n\t\t\t\t<div class="placeholder {{ $ctrl.config.size }}" ng-style="$ctrl.asg.placeholderStyle(file)"></div>\r\n\t\t\t\t<div class="source {{ $ctrl.config.size }}" ng-if="file.loaded.modal" ng-style="{\'background-image\': \'url(\' + file.source.modal + \')\'}">\r\n\t\t\t\t</div>\r\n\r\n\t\t\t</div>\r\n\r\n\t\t\t<div class="caption {{ $ctrl.config.caption.position }}" ng-show="!$ctrl.config.caption.disabled" ng-class="{\'visible\' : $ctrl.config.caption.visible}">\r\n\t\t\t\t<div class="content">\r\n\t\t\t\t\t<span class="title">{{ $ctrl.asg.file.title }}</span>\r\n\t\t\t\t\t<span ng-if="$ctrl.asg.file.title && $ctrl.asg.file.description"> - </span>\r\n\t\t\t\t\t<span class="description">{{ $ctrl.asg.file.description }}</span>\r\n\t\t\t\t\t<a href="{{ $ctrl.asg.downloadLink() }}" target="_blank" class="btn btn-default btn-xs">\r\n\t\t\t\t\t\t<span class="glyphicon glyphicon-download"></span> Download\r\n\t\t\t\t\t</a>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\r\n\t\t</div>\r\n\r\n\t\t<ng-transclude></ng-transclude>\r\n\r\n\t</div>\r\n\r\n</div>'),n.put("views/asg-panel.html",'<div class="items">\r\n\t<div class="item {{ $ctrl.asg.options.panel.item.class }}" ng-mouseover="$ctrl.hover(key, $event)" ng-repeat="(key,file) in $ctrl.asg.files track by $index" ng-style="{\'background-color\': file.source.color}" ng-class="{\'selected\' : $ctrl.asg.selected == key}">\r\n\r\n\t\t<img ng-src="{{ file.source.panel }}" ng-click="$ctrl.setSelected(key, $event)" alt="{{ file.title }}">\r\n\r\n\t\t<span class="index" ng-if="$ctrl.config.item.index">{{ key + 1 }}</span>\r\n\r\n\t\t<div class="caption" ng-if="$ctrl.config.item.caption">\r\n\t\t\t<span>{{ file.title }}</span>\r\n\t\t</div>\r\n\t</div>\r\n</div>\r\n'),n.put("views/asg-thumbnail.html",'<div class="items">\r\n\t<div class="item" ng-click="$ctrl.setSelected(key, $event)" ng-mouseover="$ctrl.hover(key, $event)" ng-repeat="(key,file) in $ctrl.asg.files track by $index" ng-style="{\'background-color\': file.source.color}" ng-class="{\'selected\' : $ctrl.asg.selected == key}">\r\n\r\n\t\t<img ng-src="{{ file.source.panel }}" ng-style="{\'height\': $ctrl.config.height + \'px\'}" alt="{{ file.title }}">\r\n\r\n\t\t<span class="index" ng-if="$ctrl.config.index">{{ key + 1 }}</span>\r\n\r\n\t</div>\r\n</div>\r\n'),n.put("views/button/asg-close.html",'<button class="btn btn-default btn-sm" ng-click="$ctrl.close($event)">\r\n\t<span class="glyphicon glyphicon-remove"></span>\r\n</button>'),n.put("views/button/asg-fullscreen.html",'<button class="btn btn-default btn-sm" ng-click="$ctrl.toggleFullScreen($event)">\r\n\t<span class="glyphicon glyphicon-fullscreen"></span>\r\n</button>'),n.put("views/button/asg-help.html",'<button class="btn btn-default btn-sm" ng-click="$ctrl.toggleHelp($event)">\r\n\t<span class="glyphicon glyphicon-question-sign"></span>\r\n</button>'),n.put("views/button/asg-index-xs.html",'<button ng-if="!$ctrl.asg.isSingle" class="btn btn-default btn-xs">\r\n\t{{ $ctrl.asg.selected + 1 }} | {{ $ctrl.asg.files.length }}\r\n</button>'),n.put("views/button/asg-index.html",'<button ng-if="!$ctrl.asg.isSingle" class="btn btn-default btn-sm" ng-click="$ctrl.toFirst(true, $event)">\r\n\t{{ $ctrl.asg.selected + 1 }} | {{ $ctrl.asg.files.length }}\r\n</button>'),n.put("views/button/asg-next.html",'<button ng-if="!$ctrl.asg.isSingle" class="btn btn-default btn-sm" ng-click="$ctrl.toForward(true, $event)">\r\n\t<span class="glyphicon glyphicon-chevron-right"></span>\r\n</button>'),n.put("views/button/asg-pin.html",'<button class="btn btn-default btn-sm" ng-click="$ctrl.toggleMenu($event)">\r\n\t<span ng-if="$ctrl.config.menu" class="glyphicon glyphicon-chevron-up"></span>\r\n\t<span ng-if="!$ctrl.config.menu" class="glyphicon glyphicon-chevron-down"></span>\r\n</button>'),n.put("views/button/asg-playstop.html",'<button ng-if="!$ctrl.asg.isSingle" class="btn btn-default btn-sm" ng-click="$ctrl.autoPlayToggle($event)">\r\n\t<span ng-if="!$ctrl.asg.options.autoplay.enabled" class="glyphicon glyphicon-play"></span>\r\n\t<span ng-if="$ctrl.asg.options.autoplay.enabled" class="glyphicon glyphicon-stop"></span>\r\n</button>'),n.put("views/button/asg-prev.html",'<button ng-if="!$ctrl.asg.isSingle" class="btn btn-default btn-sm" ng-click="$ctrl.toBackward(true, $event)">\r\n\t<span class="glyphicon glyphicon-chevron-left"></span>\r\n</button>'),n.put("views/button/asg-size.html",'<button class="btn btn-default btn-sm btn-size" ng-click="$ctrl.toggleSize($event)">\r\n\t{{ $ctrl.config.size }}\r\n</button>'),n.put("views/button/asg-thumbnails.html",'<button ng-if="!$ctrl.asg.isSingle" class="btn btn-default btn-sm" ng-click="$ctrl.toggleThumbnails($event)">\r\n\t<span class="glyphicon glyphicon-option-horizontal"></span>\r\n</button>'),n.put("views/button/asg-transition.html",'<button class="btn btn-default btn-sm hidden-xs btn-transitions" data-ng-if="!$ctrl.asg.isSingle" data-ng-click="$ctrl.nextTransition($event)">\r\n\t{{ $ctrl.config.transition }}\r\n</button>')}]);